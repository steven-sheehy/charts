apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: {{ template "mongodb-replicaset.name" . }}
    chart: {{ template "mongodb-replicaset.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
{{- if .Values.extraLabels }}
{{ toYaml .Values.extraLabels | indent 4 }}
{{- end }}
  name: {{ template "mongodb-replicaset.fullname" . }}
spec:
  selector:
    matchLabels:
      app: {{ template "mongodb-replicaset.name" . }}
      release: {{ .Release.Name }}
  serviceName: {{ template "mongodb-replicaset.fullname" . }}
  replicas: {{ .Values.replicas }}
  template:
    metadata:
      labels:
        app: {{ template "mongodb-replicaset.name" . }}
        release: {{ .Release.Name }}
{{- if .Values.extraLabels }}
{{ toYaml .Values.extraLabels | indent 8 }}
{{- end }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/mongodb-mongodb-configmap.yaml") . | sha256sum }}
      {{- if and (.Values.metrics.prometheusServiceDiscovery) (.Values.metrics.enabled) }}
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.metrics.port | quote }}
        prometheus.io/path: {{ .Values.metrics.path | quote }}
      {{- end }}
      {{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
      {{- end }}
    spec:
    {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- range .Values.imagePullSecrets }}
        - name: {{ . }}
      {{- end}}
    {{- end }}
      securityContext:
{{ toYaml .Values.securityContext | indent 8 }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      initContainers:
        - name: init
          image: "{{ .Values.init.repository }}:{{ .Values.init.tag }}"
          args:
            - -ns={{ .Release.Namespace }}
            - -on-start=/bin/mongodb/on-init.sh
            - -service={{ template "mongodb-replicaset.fullname" . }}
          imagePullPolicy: "{{ .Values.init.pullPolicy }}"
          volumeMounts:
            - name: bin
              mountPath: /bin/mongodb
            {{- if .Values.tls.enabled }}
            - name: ca
              mountPath: /etc/mongodb/ca
            {{- end }}
            {{- if .Values.auth.enabled }}
            - name: key
              mountPath: /etc/mongodb/key
            {{- end }}
            - name: run
              mountPath: /run/mongodb
          resources:
{{ toYaml .Values.init.resources | indent 12 }}
          securityContext:
            readOnlyRootFilesystem: true
{{- if .Values.initMongodStandalone }}
        - name: standalone
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          command: ["/bin/sh", "-c", "/bin/mongodb/standalone.sh"]
          {{- if .Values.auth.enabled }}
          env:
            - name: ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: "{{ template "mongodb-replicaset.adminSecret" . }}"
                  key: user
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ template "mongodb-replicaset.adminSecret" . }}"
                  key: password
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          volumeMounts:
            - name: bin
              mountPath: /bin/mongodb
            {{- if .Values.tls.enabled }}
            - name: ca
              mountPath: /etc/mongodb/ca
            {{- end }}
            - name: config
              mountPath: /etc/mongodb/config
            - name: data
              mountPath: /data/db
            {{- if .Values.auth.enabled }}
            - name: key
              mountPath: /etc/mongodb/key
            {{- end }}
            - name: run
              mountPath: /run/mongodb
{{- end }}
      containers:
        - name: mongodb
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          env:
            - name: REPLICA_SET
              value: {{ .Values.replicaSetName }}
            - name: TIMEOUT
              value: "{{ .Values.init.timeout }}"
          {{- if .Values.auth.enabled }}
            - name: ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: "{{ template "mongodb-replicaset.adminSecret" . }}"
                  key: user
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ template "mongodb-replicaset.adminSecret" . }}"
                  key: password
          {{- if .Values.metrics.enabled }}
            - name: METRICS_USER
              valueFrom:
                secretKeyRef:
                  name: "{{ template "mongodb-replicaset.metricsSecret" . }}"
                  key: user
            - name: METRICS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ template "mongodb-replicaset.metricsSecret" . }}"
                  key: password
          {{- end }}
          {{- end }}
        {{- if .Values.extraVars }}
{{ toYaml .Values.extraVars | indent 12 }}
        {{- end }}
          ports:
            - name: mongodb
              containerPort: 27017
          resources:
{{ toYaml .Values.resources | indent 12 }}
          command:
            - mongod
          args:
            - --config=/etc/mongodb/config/mongod.conf
            - --dbpath=/data/db
            - --replSet={{ .Values.replicaSetName }}
            - --port=27017
            - --bind_ip=0.0.0.0
          {{- if .Values.auth.enabled }}
            - --auth
            - --keyFile=/run/mongodb/key.txt
          {{- end }}
          {{- if .Values.tls.enabled }}
            - --sslMode=requireSSL
            - --sslCAFile=/etc/mongodb/ca/tls.crt
            - --sslPEMKeyFile=/run/mongodb/mongo.pem
          {{- end }}
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", "/bin/mongodb/on-start.sh"]
          livenessProbe:
            exec:
              command:
                - mongo
              {{- if .Values.tls.enabled }}
                - --ssl
                - --sslCAFile=/etc/mongodb/ca/tls.crt
                - --sslPEMKeyFile=/run/mongodb/mongo.pem
              {{- end }}
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          readinessProbe:
            exec:
              command:
                - mongo
              {{- if .Values.tls.enabled }}
                - --ssl
                - --sslCAFile=/etc/mongodb/ca/tls.crt
                - --sslPEMKeyFile=/run/mongodb/mongo.pem
              {{- end }}
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          volumeMounts:
            - name: bin
              mountPath: /bin/mongodb
            {{- if .Values.tls.enabled }}
            - name: ca
              mountPath: /etc/mongodb/ca
            {{- end }}
            - name: config
              mountPath: /etc/mongodb/config
            - name: data
              mountPath: /data/db
            {{- if .Values.auth.enabled }}
            - name: key
              mountPath: /etc/mongodb/key
            {{- end }}
            - name: run
              mountPath: /run/mongodb
{{ if .Values.metrics.enabled }}
        - name: metrics
          image: "{{ .Values.metrics.image.repository }}:{{ .Values.metrics.image.tag }}"
          imagePullPolicy: {{ .Values.metrics.image.pullPolicy | quote }}
          command:
            - sh
            - -ec
            - >-
              /bin/mongodb_exporter
            {{- if .Values.auth.enabled }}
              -mongodb.uri mongodb://$METRICS_USER:$METRICS_PASSWORD@localhost:{{ .Values.port }}
            {{- else }}
              -mongodb.uri mongodb://localhost:{{ .Values.port }}
            {{- end }}
            {{- if .Values.tls.enabled }}
              -mongodb.tls
              -mongodb.tls-ca=/etc/mongodb/ca/tls.crt
              -mongodb.tls-cert=/run/mongodb/mongo.pem
            {{- end }}
              -mongodb.socket-timeout={{ .Values.metrics.socketTimeout }}
              -mongodb.sync-timeout={{ .Values.metrics.syncTimeout }}
              -web.metrics-path={{ .Values.metrics.path }}
              -web.listen-address=:{{ .Values.metrics.port }}
          securityContext:
            readOnlyRootFilesystem: true
          volumeMounts:
          {{- if and (.Values.tls.enabled) }}
            - name: ca
              mountPath: /etc/mongodb/ca
              readOnly: true
          {{- end }}
            - name: run
              mountPath: /run/mongodb
              readOnly: true
          env:
          {{- if .Values.auth.enabled }}
            - name: METRICS_USER
              valueFrom:
                secretKeyRef:
                  name: "{{ template "mongodb-replicaset.metricsSecret" . }}"
                  key: user
            - name: METRICS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ template "mongodb-replicaset.metricsSecret" . }}"
                  key: password
          {{- end }}
          ports:
            - name: metrics
              containerPort: {{ .Values.metrics.port  }}
          resources:
{{ toYaml .Values.metrics.resources | indent 12 }}
          livenessProbe:
            exec:
              command:
                - sh
                - -ec
                - >-
                  /bin/mongodb_exporter
                {{- if .Values.auth.enabled }}
                  -mongodb.uri mongodb://$METRICS_USER:$METRICS_PASSWORD@localhost:{{ .Values.port }}
                {{- else }}
                  -mongodb.uri mongodb://localhost:{{ .Values.port }}
                {{- end }}
                {{- if .Values.tls.enabled }}
                  -mongodb.tls
                  -mongodb.tls-ca=/etc/mongodb/ca/tls.crt
                  -mongodb.tls-cert=/run/mongodb/mongo.pem
                {{- end }}
                  -test
              initialDelaySeconds: 30
              periodSeconds: 10
{{ end }}
   {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
        - name: bin
          configMap:
            defaultMode: 365
            name: {{ template "mongodb-replicaset.fullname" . }}-init
        - name: config
          configMap:
            name: {{ template "mongodb-replicaset.fullname" . }}-mongodb
        {{- if .Values.tls.enabled }}
        - name: ca
          secret:
            defaultMode: 256
            secretName: {{ template "mongodb-replicaset.fullname" . }}-ca
        {{- end }}
        {{- if .Values.auth.enabled }}
        - name: key
          secret:
            defaultMode: 256
            secretName: {{ template "mongodb-replicaset.keySecret" . }}
        {{- end }}
        - name: run
          emptyDir: {}
{{- if .Values.persistentVolume.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
        {{- range $key, $value := .Values.persistentVolume.annotations }}
          {{ $key }}: {{ $value }}
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistentVolume.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistentVolume.size | quote }}
      {{- if .Values.persistentVolume.storageClass }}
      {{- if (eq "-" .Values.persistentVolume.storageClass) }}
        storageClassName: ""
      {{- else }}
        storageClassName: "{{ .Values.persistentVolume.storageClass }}"
      {{- end }}
      {{- end }}
{{- else }}
        - name: data
          emptyDir: {}
{{- end }}
